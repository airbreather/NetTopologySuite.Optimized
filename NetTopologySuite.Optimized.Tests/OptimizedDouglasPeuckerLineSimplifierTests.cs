using System;
using System.Globalization;

using NetTopologySuite.Optimized.Algorithm;
using NetTopologySuite.Simplify;

using Xunit;

namespace NetTopologySuite.Optimized.Tests
{
    public sealed class OptimizedDouglasPeuckerLineSimplifierTests
    {
        public static object[][] TestCases => new object[][]
        {
            new object[] { "", 1 },
            new object[] { "10 10", 1 },
            new object[] { "10 10, 12 12", 1 },
            new object[] { "10 10, 11 11, 12 10", 1 },
            new object[] { "10 10, 11 11, 12 10", 1.1 },
            new object[] { "20 220, 40 220, 60 220, 80 220, 100 220, 120 220, 140 220, 140 180, 100 180, 60 180, 20 180, 20 220", 10 },
            new object[] { "40 240, 160 241, 280 240, 280 160, 160 240, 40 140, 40 240", 10 },
            new object[] { "120 120, 121 121, 122 122, 220 120, 180 199, 160 200, 140 199, 120 120", 10 },
            new object[] { "80 200, 240 200, 240 60, 80 60, 80 200", 10 },
            new object[] { "-170.6682 -14.377251, -170.669225 -14.378057, -170.673317 -14.380664, -170.675842 -14.382272, -170.688544 -14.391113, -170.690118 -14.392209, -170.693656 -14.394545, -170.697079 -14.396805, -170.707348 -14.403588, -170.710771 -14.405849, -170.711401 -14.406265, -170.713037 -14.407346, -170.713291 -14.407512, -170.713923 -14.407927, -170.725755 -14.415942, -170.739019 -14.41995, -170.73902 -14.41995, -170.739933 -14.41987, -170.742673 -14.419633, -170.743587 -14.419554, -170.75 -14.418998, -170.750555 -14.41895, -170.759852 -14.418136, -170.763393 -14.41683, -170.766964 -14.415514, -170.774121 -14.413213, -170.774344 -14.413142, -170.777061 -14.410872, -170.777129 -14.410814, -170.777336 -14.410641, -170.777405 -14.410584, -170.780829 -14.407722, -170.781144 -14.40746, -170.784395 -14.403601, -170.785869 -14.400524, -170.790355 -14.399961, -170.792512 -14.399691, -170.794676 -14.398945, -170.795266 -14.398741, -170.797036 -14.398131, -170.797627 -14.397928, -170.797682 -14.397908, -170.79785 -14.39785, -170.797906 -14.397832, -170.798724 -14.39755, -170.80118 -14.396703, -170.801999 -14.396422, -170.802811 -14.396141, -170.803958 -14.395747, -170.805005 -14.394868, -170.805664 -14.394316, -170.805825 -14.39418, -170.806308 -14.393775, -170.80647 -14.39364, -170.807196 -14.39303, -170.809377 -14.391201, -170.810104 -14.390592, -170.812269 -14.388775, -170.812594 -14.388307, -170.817993 -14.380553, -170.818486 -14.379999, -170.820746 -14.377464, -170.82085 -14.377059, -170.821655 -14.375, -170.823099 -14.371787, -170.825005 -14.37125, -170.825065 -14.37115, -170.825412 -14.371125, -170.826805 -14.371026, -170.82727 -14.370994, -170.828194 -14.370928, -170.82966 -14.370823, -170.830965 -14.370731, -170.83189 -14.370666, -170.833973 -14.370518, -170.838101 -14.370225, -170.840153 -14.369666, -170.842169 -14.369118, -170.845535 -14.368201, -170.852334 -14.366351, -170.855304 -14.364653, -170.858334 -14.362923, -170.862063 -14.360792, -170.865943 -14.358576, -170.869679 -14.354855, -170.871928 -14.352656, -170.875 -14.349654, -170.875 -14.349899, -170.883698 -14.342694, -170.887928 -14.333713, -170.889252 -14.330902, -170.890348 -14.32335, -170.890291 -14.317194, -170.888464 -14.312976, -170.886374 -14.308099, -170.881845 -14.298484, -170.875 -14.287667, -170.875 -14.287597, -170.872488 -14.285161, -170.867026 -14.279866, -170.865057 -14.277753, -170.862673 -14.275194, -170.862533 -14.275044, -170.855192 -14.268764, -170.850454 -14.264712, -170.840271 -14.258018, -170.832049 -14.257161, -170.829502 -14.257687, -170.829334 -14.257429, -170.826823 -14.253572, -170.823922 -14.250682, -170.822974 -14.25, -170.823099 -14.24997, -170.82311 -14.249966, -170.823258 -14.25, -170.816778 -14.247654, -170.804473 -14.246314, -170.799992 -14.246881, -170.797156 -14.246637, -170.794219 -14.246385, -170.766256 -14.243967, -170.75 -14.241175, -170.75 -14.241187, -170.75 -14.241223, -170.75 -14.241235, -170.749499 -14.240304, -170.747996 -14.237511, -170.747496 -14.236581, -170.745979 -14.233761, -170.741597 -14.229295, -170.740572 -14.228482, -170.737232 -14.225831, -170.732128 -14.223627, -170.726287 -14.222683, -170.724471 -14.220196, -170.720325 -14.214726, -170.7153 -14.210424, -170.713384 -14.208783, -170.706229 -14.205096, -170.706074 -14.20498, -170.70392 -14.203366, -170.702795 -14.196863, -170.695367 -14.190203, -170.695334 -14.190174, -170.687092 -14.18224, -170.67664 -14.178337, -170.6652 -14.175947, -170.655315 -14.175545, -170.641804 -14.176921, -170.641661 -14.176936, -170.636626 -14.17874, -170.628085 -14.182835, -170.625 -14.185834, -170.620338 -14.188809, -170.606353 -14.197736, -170.602228 -14.20037, -170.601603 -14.200249, -170.601312 -14.200192, -170.600439 -14.200022, -170.600149 -14.199966, -170.59817 -14.199584, -170.592234 -14.19844, -170.590256 -14.198059, -170.589777 -14.197966, -170.58834 -14.197689, -170.587861 -14.197597, -170.581658 -14.1964, -170.566335 -14.197755, -170.559218 -14.198385, -170.536778 -14.20434, -170.521818 -14.22022, -170.512957 -14.229624, -170.510598 -14.23213, -170.506853 -14.25, -170.506503 -14.251456, -170.506171 -14.252841, -170.506457 -14.2543, -170.505647 -14.255659, -170.505276 -14.256284, -170.504717 -14.256814, -170.49472 -14.265964, -170.490341 -14.282475, -170.491495 -14.301691, -170.5 -14.317616, -170.50238 -14.320364, -170.50641 -14.32516, -170.509439 -14.328763, -170.519675 -14.333156, -170.529268 -14.33502, -170.530839 -14.335326, -170.53809 -14.336129, -170.548483 -14.33728, -170.548909 -14.337328, -170.559541 -14.338046, -170.572833 -14.336744, -170.579599 -14.335231, -170.58142 -14.334824, -170.585074 -14.333024, -170.586502 -14.331034, -170.588551 -14.331321, -170.589977 -14.33152, -170.592448 -14.331867, -170.594222 -14.332303, -170.595622 -14.332648, -170.597189 -14.333034, -170.601893 -14.334192, -170.602385 -14.334313, -170.603494 -14.334305, -170.605761 -14.334289, -170.612562 -14.334242, -170.61483 -14.334227, -170.61645 -14.334216, -170.616566 -14.334228, -170.621749 -14.334788, -170.623477 -14.334975, -170.625 -14.335139, -170.627692 -14.335277, -170.631926 -14.335496, -170.637463 -14.336914, -170.639761 -14.338385, -170.642786 -14.340321, -170.64317 -14.340829, -170.645315 -14.343666, -170.648176 -14.347451, -170.650489 -14.352908, -170.65184 -14.356094, -170.65187 -14.356187, -170.652776 -14.358973, -170.654493 -14.364252, -170.656558 -14.36675, -170.658426 -14.369009, -170.658818 -14.369483, -170.659996 -14.370907, -170.660384 -14.371376, -170.66039 -14.371381, -170.661381 -14.372104, -170.664355 -14.374276, -170.665347 -14.375, -170.665917 -14.37545, -170.666331 -14.375776, -170.667629 -14.3768, -170.6682 -14.377251", 0.000001 }
        };

        [Theory]
        [MemberData(nameof(TestCases))]
        public void AcceptanceTest(string inputText, double distanceTolerance)
        {
            XYCoordinate[] input = ParseCoordinates(inputText);
            XYCoordinate[] actual = new XYCoordinate[input.Length];
            int sz = OptimizedDouglasPeuckerLineSimplifier.Simplify(input, actual, distanceTolerance);
            Array.Resize(ref actual, sz);

            GeoAPI.Geometries.Coordinate[] nts = Array.ConvertAll(input, c => c.CopyToGeoAPI());
            if (nts.Length != 0)
            {
                nts = DouglasPeuckerLineSimplifier.Simplify(nts, distanceTolerance);
            }

            XYCoordinate[] expected = Array.ConvertAll(nts, c => new XYCoordinate(c));

            Assert.Equal(expected, actual);
        }

        private static XYCoordinate[] ParseCoordinates(string toParse)
        {
            string[] coords = toParse.Split(',', StringSplitOptions.RemoveEmptyEntries);
            XYCoordinate[] result = new XYCoordinate[coords.Length];
            for (int i = 0; i < coords.Length; i++)
            {
                string[] vals = coords[i].Split(' ', StringSplitOptions.RemoveEmptyEntries);
                result[i].X = Double.Parse(vals[0], NumberStyles.Float, CultureInfo.InvariantCulture);
                result[i].Y = Double.Parse(vals[1], NumberStyles.Float, CultureInfo.InvariantCulture);
            }

            return result;
        }
    }
}
